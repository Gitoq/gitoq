/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Gitoq
 * OpenAPI spec version: 1.0.0
 */
import { api } from "./api.js";
export type ApiCliProjectEnvs200 = {
  message?: string;
  envs: ExtraLimitedEnv[];
};

export type ApiCliPull200 = {
  env: Env;
  message?: string;
};

export type ApiCliPush200 = {
  env: Env;
  message?: string;
};

export type ApiCliPushBody = {
  content: string;
};

export type ApiCliWorkspaceProjects200 = {
  message?: string;
  projects: ExtraLimitedProject[];
};

export type ApiCliUserWorkspaces200 = {
  message?: string;
  workspaces: SuperExtraLimitedWorkspace[];
};

export type ApiCliLogout200 = {
  message?: string;
};

export type ApiCliLogin200 = {
  token: string;
  message?: string;
};

export interface User {
  id: number;
  name: string;
  email: string;
  avatar: string;
  role: UserRole;
  created_at: string;
  is_banned: boolean;
  is_joined: boolean;
  modified_at: string;
  is_verified: boolean;
  workspaces_count: number;
  default_workspace: number;
}

export interface Workspace {
  id: number;
  name: string;
  owner: number;
  avatar: string;
  created_at: string;
  description: string;
  is_default: boolean;
  projects_count: number;
}

export interface Project {
  id: number;
  name: string;
  owner: number;
  token: string;
  workspace: number;
  created_at: string;
  envs_count: number;
  default_env: number;
  licenses_count: number;
  with_env_example: boolean;
}

export interface License {
  /** ID */
  id: number;
  role: LicenseRole;
  created_at: string;
  owner: LimitedUser;
  is_verified: boolean;
  permissions: LicensePermissions;
}

export interface UserFully {
  id: number;
  name: string;
  email: string;
  avatar: string;
  role: UserRole;
  created_at: string;
  is_banned: boolean;
  is_joined: boolean;
  modified_at: string;
  is_verified: boolean;
  workspaces_count: number;
  default_workspace: Workspace;
}

export interface Env {
  id: number;
  name: string;
  content: string;
  project: number;
  workspace: number;
  created_at: string;
  is_default: boolean;
}

/**
 * @nullable
 */
export type LogInfo = null | {
  env_name?: string;
  new_name?: string;
  prev_name?: string;
  project_name?: string;
};

export interface Log {
  id: number;
  /** @nullable */
  info: LogInfo;
  workspace: number;
  action: LogActions;
  created_at: string;
  /** @nullable */
  project: null | number;
  done_by: ExtraLimitedUser;
  effected?: ExtraLimitedUser;
}

export interface LimitedWorkspace {
  /** ID */
  id: number;
  owner: number;
  is_default: boolean;
  projects_count: number;
}

export interface ExtraLimitedWorkspace {
  /** ID */
  id: number;
  name: string;
  avatar: string;
  projects_count: number;
}

export interface LimitedProject {
  id: number;
  /** name */
  name: string;
  workspace: number;
  default_env: number;
}

export interface LimitedEnd {
  id: number;
  name: string;
  project: number;
  workspace: number;
  created_at: string;
  is_default: boolean;
}

export interface ProjectFully {
  id: number;
  name: string;
  owner: number;
  token: string;
  workspace: number;
  created_at: string;
  envs: LimitedEnd[];
  envs_count: number;
  default_env: number;
  licenses: License[];
  licenses_count: number;
  with_env_example: boolean;
  user_license: LicensePermissions;
}

export interface LimitedUser {
  id: number;
  name: string;
  email: string;
  avatar: string;
}

export interface ExtraLimitedUser {
  id: number;
  name: string;
  email: string;
}

export type ErrorErrors = { [key: string]: any };

export interface Error {
  env?: number;
  key?: string;
  message?: string;
  project?: number;
  workspace?: number;
  errors?: ErrorErrors;
}

export interface Response {
  message?: string;
}

export type UserWorkspacesSelectedWorkspace = {
  id: number;
  name: string;
  owner: number;
  avatar: string;
  created_at: string;
  description: string;
  is_default: boolean;
  licenses_count: number;
  projects_count: number;
  licenses: LimitedUser[];
  projects: LimitedProject[];
};

export interface UserWorkspaces {
  workspaces: ExtraLimitedWorkspace[];
  selected_workspace: UserWorkspacesSelectedWorkspace;
}

export type LicensePermissionsItem = (typeof LicensePermissionsItem)[keyof typeof LicensePermissionsItem];

export const LicensePermissionsItem = {
  ADD_ENV: "ADD_ENV",
  EDIT_ENV: "EDIT_ENV",
  PULL_ENV: "PULL_ENV",
  PUSH_ENV: "PUSH_ENV",
  DELETE_ENV: "DELETE_ENV",
  ADD_LICENSE: "ADD_LICENSE",
  EDIT_LICENSE: "EDIT_LICENSE",
  EDIT_PROJECT: "EDIT_PROJECT",
  REMOVE_LICENSE: "REMOVE_LICENSE",
  DELETE_PROJECT: "DELETE_PROJECT",
  TRANSFER_PROJECT: "TRANSFER_PROJECT",
} as const;

export type LicensePermissions = LicensePermissionsItem[];

export type LicenseRole = (typeof LicenseRole)[keyof typeof LicenseRole];

export const LicenseRole = {
  OWNER: "OWNER",
  MEMBER: "MEMBER",
} as const;

export type UserRole = (typeof UserRole)[keyof typeof UserRole];

export const UserRole = {
  USER: "USER",
  ADMIN: "ADMIN",
} as const;

export type LogActions = (typeof LogActions)[keyof typeof LogActions];

export const LogActions = {
  LEFT: "LEFT",
  LOGIN: "LOGIN",
  SIGNUP: "SIGNUP",
  LOGOUT: "LOGOUT",
  PUSH_ENV: "PUSH_ENV",
  CREATE_ENV: "CREATE_ENV",
  REMOVE_ENV: "REMOVE_ENV",
  UPDATE_ENV: "UPDATE_ENV",
  UPDATE_LICENSE: "UPDATE_LICENSE",
  REMOVE_LICENSE: "REMOVE_LICENSE",
  CREATE_PROJECT: "CREATE_PROJECT",
  REMOVE_PROJECT: "REMOVE_PROJECT",
  UPDATE_PROJECT: "UPDATE_PROJECT",
  UPDATE_PROFILE: "UPDATE_PROFILE",
  RESET_PASSWORD: "RESET_PASSWORD",
  UPDATE_PASSWORD: "UPDATE_PASSWORD",
  CREATE_WORKSPACE: "CREATE_WORKSPACE",
  UPDATE_WORKSPACE: "UPDATE_WORKSPACE",
  SEND_LICENSE_REQUEST: "SEND_LICENSE_REQUEST",
  APPLY_LICENSE_REQUEST: "APPLY_LICENSE_REQUEST",
  REMOVE_LICENSE_REQUEST: "REMOVE_LICENSE_REQUEST",
  SEND_PROJECT_TRANSFER_REQUEST: "SEND_PROJECT_TRANSFER_REQUEST",
  APPLY_PROJECT_TRANSFER_REQUEST: "APPLY_PROJECT_TRANSFER_REQUEST",
  SEND_WORKSPACE_TRANSFER_REQUEST: "SEND_WORKSPACE_TRANSFER_REQUEST",
  APPLY_WORKSPACE_TRANSFER_REQUEST: "APPLY_WORKSPACE_TRANSFER_REQUEST",
} as const;

export type SessionDeviceType = (typeof SessionDeviceType)[keyof typeof SessionDeviceType];

export const SessionDeviceType = {
  CLI: "CLI",
  PHONE: "PHONE",
  OTHERS: "OTHERS",
  DESKTOP: "DESKTOP",
} as const;

export interface Session {
  /** ID */
  id: number;
  user: number;
  created_at: string;
  expires_in: number;
  long_agent: string;
  modified_at: string;
  short_agent: string;
  device_type: SessionDeviceType;
}

export interface SuperExtraLimitedWorkspace {
  /** ID */
  id: number;
  /** name */
  name: string;
}

export interface ExtraLimitedProject {
  id: number;
  /** name */
  name: string;
  token: string;
}

export interface ExtraLimitedEnv {
  /** ID */
  id: number;
  /** name */
  name: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary login
 */
export const apiCliLogin = (options?: SecondParameter<typeof api>) =>
  api<ApiCliLogin200>({ method: "POST", url: `/cli/login` }, options);

/**
 * @summary logout
 */
export const apiCliLogout = (options?: SecondParameter<typeof api>) =>
  api<ApiCliLogout200>({ method: "DELETE", url: `/cli/logout` }, options);

/**
 * @summary user workspaces
 */
export const apiCliUserWorkspaces = (options?: SecondParameter<typeof api>) =>
  api<ApiCliUserWorkspaces200>({ method: "GET", url: `/cli/user-workspaces` }, options);

/**
 * @summary workspace projects
 */
export const apiCliWorkspaceProjects = (id: number, options?: SecondParameter<typeof api>) =>
  api<ApiCliWorkspaceProjects200>({ method: "GET", url: `/cli/workspace-projects/${id}` }, options);

/**
 * @summary push
 */
export const apiCliPush = (token: string, env: string, apiCliPushBody: ApiCliPushBody, options?: SecondParameter<typeof api>) =>
  api<ApiCliPush200>(
    { method: "POST", data: apiCliPushBody, url: `/cli/push/${token}/${env}`, headers: { "Content-Type": "application/json" } },
    options,
  );

/**
 * @summary pull
 */
export const apiCliPull = (token: string, env: string, options?: SecondParameter<typeof api>) =>
  api<ApiCliPull200>({ method: "GET", url: `/cli/pull/${token}/${env}` }, options);

/**
 * @summary project envs
 */
export const apiCliProjectEnvs = (token: string, options?: SecondParameter<typeof api>) =>
  api<ApiCliProjectEnvs200>({ method: "GET", url: `/cli/project-envs/${token}` }, options);

export type ApiCliLoginResult = NonNullable<Awaited<ReturnType<typeof apiCliLogin>>>;
export type ApiCliLogoutResult = NonNullable<Awaited<ReturnType<typeof apiCliLogout>>>;
export type ApiCliUserWorkspacesResult = NonNullable<Awaited<ReturnType<typeof apiCliUserWorkspaces>>>;
export type ApiCliWorkspaceProjectsResult = NonNullable<Awaited<ReturnType<typeof apiCliWorkspaceProjects>>>;
export type ApiCliPushResult = NonNullable<Awaited<ReturnType<typeof apiCliPush>>>;
export type ApiCliPullResult = NonNullable<Awaited<ReturnType<typeof apiCliPull>>>;
export type ApiCliProjectEnvsResult = NonNullable<Awaited<ReturnType<typeof apiCliProjectEnvs>>>;
